<?php

/**
 * @file
 * Code for the kreol_campaign feature.
 */

include_once 'kreol_campaign.features.inc';

/**
 * Implements hook_preprocess_node().
 */
function kreol_campaign_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ('kreol_campaign' === $node->type) {
  }
}

/**
 * Implements hook_preprocess_entity().
 */
function kreol_campaign_preprocess_entity(&$variables) {
  if ('paragraphs_item' === $variables['entity_type']) {
    if ('campaign_audio_book' === $variables['paragraphs_item']->bundle()
        || 'campaign_material' === $variables['paragraphs_item']->bundle()) {
      $ting_entity = NULL;

      $variables['isbn'] =
        $variables['cover'] =
        $variables['author'] =
        $variables['title'] = '';

      $wrapper = $variables['paragraphs_item']->wrapper();
      $url = $wrapper->field_material_url->value();
      $ting_entity = _reol_base_object_from_url($url);

      if ($ting_entity) {
        $build = ting_object_view($ting_entity, 'compact');
        // For some reason this is an array.
        $stuff = $ting_entity->getIsbn();
        $isbn = reset($stuff);
        $stuff = $ting_entity->getCreators();
        $author = reset($stuff);
        $variables['isbn'] = $isbn;
        $variables['cover'] = $build['ting_cover'];
        $variables['author'] = check_plain($author);
        $variables['title'] = check_plain($ting_entity->getTitle());
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function kreol_campaign_form_alter(&$form, &$form_state, $form_id) {
  if ('kreol_campaign_node_form' === $form_id) {
    // Hide the geofencing fields.
    unset($form['field_geofencing_max_distance']);
    unset($form['field_geofencing_origin']);
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function kreol_campaign_paragraphs_field_widget_form_alter(&$element, &$form_state, $context) {
  if (isset($element['#bundle']) && 'campaign_audio_book' === $element['#bundle']) {
    /** @var \ParagraphsItemEntity $entity */
    $entity = $element['#entity'];
    $wrapper = entity_metadata_wrapper($element['#entity_type'], $entity);
    $audio_data = json_decode($wrapper->field_audio_data->value(), TRUE);
    if (!empty($audio_data)) {
      $element['field_material_url']['#prefix'] = '<div class="description">('
        . $audio_data['title'] . '; ' . $audio_data['artist']
        . ')</div>';
    }

    if ('campaign_audio_books' === $entity->hostEntityBundle()) {
      // Hide the audio url field on non-tv campaign pages.
      unset($element['field_audio_url']);
    }

    // Add autocomplete to material url fields.
    // $element['field_material_url'][LANGUAGE_NONE][0]['value']['#autocomplete_path']
    // = 'kreol/autocomplete/material.url';.
  }
}

/**
 * Implements hook_menu().
 */
function kreol_campaign_menu() {
  $items['kreol/audio-book/player'] = [
    'page callback' => 'kreol_campaign_audiobook_player',
    'access arguments' => ['access content'],
  ];

  $items['kreol/autocomplete/%'] = [
    'page callback' => 'kreol_autocomplete',
    'page arguments' => [2],
    'access arguments' => ['access content'],
  ];

  return $items;
}

/**
 * Menu callback.
 */
function kreol_campaign_audiobook_player($orderId) {
  return [
    '#theme' => 'kreol_campaign_audiobook_player',
    '#view_mode' => 'full',
    '#type' => 'page',
  ];
}

/**
 * Implements hook_theme().
 */
function kreol_campaign_theme() {
  $current_theme = $GLOBALS['theme'];

  return [
    'kreol_campaign_audiobook_player' => [
      'template' => 'audio-book-player',
      'render element' => 'page',
      'path' => drupal_get_path('theme', $current_theme) . '/templates',
    ],
  ];
}

/**
 * Autocomplete stuff.
 */
function kreol_autocomplete($type, $query) {
  $url = url('https://itk:itk@stg.ereolen.dk/widget/search', ['query' => ['query' => $query]]);
  $response = drupal_http_request($url);
  $items = json_decode($response->data)->data;
  $data = [];
  if ($items) {
    foreach ($items as $item) {
      $data[$item->url] = implode(
        '<br/>', [
          $item->id,
          $item->title,
          implode(', ', $item->creators),
        ]);
    }
  }

  drupal_json_output($data);
}

/**
 * Implements hook_secure_permissions_roles().
 */
function kreol_campaign_secure_permissions_roles() {
  return [
    'campaign editor',
  ];
}

/**
 * Implements hook_secure_permissions().
 */
function kreol_campaign_secure_permissions($role) {
  $permissions = [
    'campaign editor' => [
      'access toolbar',
      'access content overview',

      'access administration pages',
      'administer redirects',

      'administer access filter rules',

      'view the administration theme',
      'view own unpublished content',
      'use text format ding_wysiwyg',

      'create kreol_campaign content',
      'edit own kreol_campaign content',
      'edit any kreol_campaign content',
      'delete own kreol_campaign content',
      'delete any kreol_campaign content',

      'create kreol_campaign_tv content',
      'edit own kreol_campaign_tv content',
      'edit any kreol_campaign_tv content',
      'delete own kreol_campaign_tv content',
      'delete any kreol_campaign_tv content',
    ],
  ];

  return isset($permissions[$role]) ? $permissions[$role] : NULL;
}

/**
 * Implements hook_entity_presave().
 */
function kreol_campaign_entity_presave($entity, $type) {
  if ('paragraphs_item' === $type && 'campaign_audio_book' === $entity->bundle()) {
    $wrapper = entity_metadata_wrapper($type, $entity);
    $url = $wrapper->field_material_url->value();
    $ting_entity = _reol_base_object_from_url($url);

    if ($ting_entity) {
      $stuff = $ting_entity->getIsbn();
      $isbn = reset($stuff);
      $order_id = NULL;

      try {
        $order_id = _kreol_campaign_get_orderid($isbn);
        if (empty($order_id)) {
          throw new \Exception('');
        }
      }
      catch (\Exception $exception) {
        drupal_set_message(t('Cannot get order id for isbn @isbn (@url)', array('@isbn' => $isbn, '@url' => $url)), 'error');
      }

      if ('kreol_campaign_tv' === $entity->hostEntityBundle()) {
        $wrapper->field_audio_url = $order_id;
      }

      try {
        $metadata_url = 'https://audio.api.streaming.pubhub.dk/v1/orders/' . $order_id;
        $result = drupal_http_request($metadata_url);
        $audio_data = json_decode($result->data, TRUE);
        // Replace cover with local (down-scaled) image.
        $covers = ting_covers_get([$ting_entity->id]);
        if (isset($covers[$ting_entity->id])) {
          $audio_data['cover'] = image_style_url('ding_list_medium', $covers[$ting_entity->id]);
        }

        // Turn http image urls into https urls (to prevent mixed content).
        array_walk_recursive($audio_data, function (&$value) {
          if (preg_match('@^http://images.pubhub.dk/@', $value)) {
            $value = preg_replace('@^http://@', 'https://', $value);
          }
        });
        $audio_data['isbn'] = $isbn;
        $wrapper->field_audio_data = json_encode($audio_data);
      }
      catch (\Exception $exception) {
        drupal_set_message(t('Cannot get audio data for isbn @isbn (@url)', array('@isbn' => $isbn, '@url' => $url)), 'error');
      }

    }
    else {
      drupal_set_message(t('Cannot get audio data from url @url', array('@url' => $url)), 'error');
    }
  }
}

/**
 * Get order id from an isbn.
 *
 * This hack tries to parse a JavaScript expression in an HTML page â€¦
 */
function _kreol_campaign_get_orderid($isbn) {
  $url = 'https://play.pubhub.dk/lyttestation.html';
  $response = drupal_http_request($url);
  if (isset($response->data)) {
    $pattern = '@[\'"](?P<isbn>[0-9]{13})[\'"]\s*:\s*[\'"](?P<orderid>[a-z0-9-]{36})[\'"].*//\s*(?P<title>.+)@i';
    if (preg_match_all($pattern, $response->data, $matches, PREG_SET_ORDER)) {
      foreach ($matches as $match) {
        if ($isbn === $match['isbn']) {
          return $match['orderid'];
        }
      }
    }
  }

  return NULL;
}
