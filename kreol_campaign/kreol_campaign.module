<?php

/**
 * @file
 * Code for the kreol_campaign feature.
 */

include_once 'kreol_campaign.features.inc';

/**
 * Implements hook_preprocess_entity().
 */
function kreol_campaign_preprocess_entity(&$variables) {
  if ('paragraphs_item' === $variables['entity_type']) {
    if ('campaign_audio_book' === $variables['paragraphs_item']->bundle()
                || 'campaign_material' === $variables['paragraphs_item']->bundle()) {
      $ting_entity = NULL;

      $variables['cover'] =
        $variables['author'] =
        $variables['title'] = array();

      $wrapper = $variables['paragraphs_item']->wrapper();
      $url = $wrapper->field_material_url->value();
      $ting_entity = _reol_base_object_from_url($url);

      if ($ting_entity) {
        drupal_add_js('https://play.pubhub.dk/1.1.4/js/player-kernel.min.js', 'external');
        drupal_add_js('https://cdnjs.cloudflare.com/ajax/libs/bowser/1.7.2/bowser.min.js', 'external');
        drupal_add_js(drupal_get_path('module', 'kreol_campaign') . '/js/audio_book.js');

        if ('campaign_audio_book' === $variables['paragraphs_item']->bundle()) {
          $ting_entity->reol_no_icons = TRUE;
        }
        $build = ting_object_view($ting_entity, 'compact');
        // For some reason this is an array.
        $stuff = $ting_entity->getIsbn();
        $isbn = reset($stuff);
        $stuff = $ting_entity->getCreators();
        $author = reset($stuff);
        $variables['isbn'] = $isbn;
        $variables['cover'] = $build['ting_cover'];
        $variables['author'] = check_plain($author);
        $variables['title'] = check_plain($ting_entity->getTitle());
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function kreol_campaign_form_alter(&$form, &$form_state, $form_id) {
  if ('kreol_campaign_node_form' === $form_id) {
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function kreol_campaign_paragraphs_field_widget_form_alter(&$element, &$form_state, $context) {
  if (isset($element['#bundle']) && 'campaign_audio_book' === $element['#bundle']) {
    // Add autocomplete to material url fields.
    // $element['field_material_url'][LANGUAGE_NONE][0]['value']['#autocomplete_path']
    // = 'kreol/autocomplete/material.url';.
  }
}

/**
 * Implements hook_menu().
 */
function kreol_campaign_menu() {
  $items['kreol/autocomplete/%'] = [
    'page callback' => 'kreol_autocomplete',
    'page arguments' => [2],
    'access arguments' => ['access content'],
  ];

  return $items;
}

/**
 * Autocomplete stuff.
 */
function kreol_autocomplete($type, $query) {
  $url = url('https://itk:itk@stg.ereolen.dk/widget/search', ['query' => ['query' => $query]]);
  $response = drupal_http_request($url);
  $items = json_decode($response->data)->data;
  $data = [];
  if ($items) {
    foreach ($items as $item) {
      $data[$item->url] = implode(
        '<br/>', [
          $item->id,
          $item->title,
          implode(', ', $item->creators),
        ]);
    }
  }

  drupal_json_output($data);
}

/**
 * Implements hook_secure_permissions_roles().
 */
function kreol_campaign_secure_permissions_roles() {
  return [
    'campaign editor',
  ];
}

/**
 * Implements hook_secure_permissions().
 */
function kreol_campaign_secure_permissions($role) {
  $permissions = [
    'campaign editor' => [
      'access toolbar',

      'create kreol_campaign content',
      'edit own kreol_campaign content',
      'edit any kreol_campaign content',
      'delete own kreol_campaign content',
      'delete any kreol_campaign content',

      'create kreol_campaign_tv content',
      'edit own kreol_campaign_tv content',
      'edit any kreol_campaign_tv content',
      'delete own kreol_campaign_tv content',
      'delete any kreol_campaign_tv content',
    ],
  ];

  return isset($permissions[$role]) ? $permissions[$role] : NULL;
}

/**
 * Implements hook_entity_presave().
 */
function kreol_campaign_entity_presave($entity, $type) {
  if ('paragraphs_item' === $type && 'campaign_audio_book' === $entity->bundle()) {
    $wrapper = entity_metadata_wrapper($type, $entity);
    if (preg_match('/(?P<id>.{8}-.{4}-.{4}-.{4}-.{12})/', $wrapper->field_audio_url->value(), $matches)) {
      try {
        $metadata_url = 'https://audio.api.streaming.pubhub.dk/v1/orders/'.$matches['id'];
        $result = drupal_http_request($metadata_url);
        $wrapper->field_audio_data = $result->data;
      } catch (\Exception $exception) {
        drupal_set_message(t('Cannot get audio data'), 'error');
      }
    }
  }
}
